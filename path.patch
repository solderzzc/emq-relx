diff --git a/etc/emq.conf b/etc/emq.conf
index f296b8f..e4e4f06 100644
--- a/etc/emq.conf
+++ b/etc/emq.conf
@@ -135,12 +135,6 @@ cluster.autoclean = 5m
 ## Value: String
 ## cluster.k8s.app_name = emq
 
-## Kubernates Namespace
-##
-## Value: String
-## cluster.k8s.namespace = default
-
-
 ##--------------------------------------------------------------------
 ## Node Args
 ##--------------------------------------------------------------------
@@ -413,6 +407,11 @@ mqtt.max_packet_size = 64KB
 ## Value: on | off
 mqtt.websocket_protocol_header = on
 
+## Set websocket default listen path for MQTT Protocol
+##
+## Value: String
+mqtt.websocket_listen_path = /
+
 ## The backoff for MQTT keepalive timeout.
 ## EMQ will kick a MQTT connection out until 'Keepalive * backoff * 2' timeout.
 ##
diff --git a/priv/emq.schema b/priv/emq.schema
index a06d838..05b67bf 100644
--- a/priv/emq.schema
+++ b/priv/emq.schema
@@ -124,10 +124,6 @@
   {datatype, string}
 ]}.
 
-{mapping, "cluster.k8s.namespace", "ekka.cluster_discovery", [
-  {datatype, string}
-]}.
-
 {translation, "ekka.cluster_discovery", fun(Conf) ->
   Strategy = cuttlefish:conf_get("cluster.discovery", Conf),
   Filter  = fun(Opts) -> [{K, V} || {K, V} <- Opts, V =/= undefined] end,
@@ -156,8 +152,7 @@
                  [{apiserver, cuttlefish:conf_get("cluster.k8s.apiserver", Conf)},
                   {service_name, cuttlefish:conf_get("cluster.k8s.service_name", Conf)},
                   {address_type, cuttlefish:conf_get("cluster.k8s.address_type", Conf, ip)},
-                  {app_name, cuttlefish:conf_get("cluster.k8s.app_name", Conf)},
-                  {namespace, cuttlefish:conf_get("cluster.k8s.namespace", Conf)}];
+                  {app_name, cuttlefish:conf_get("cluster.k8s.app_name", Conf)}];
                (manual) ->
                  [ ]
             end,
@@ -439,7 +434,7 @@ end}.
     ConsoleLogLevel = cuttlefish:conf_get("log.console.level", Conf),
     ConsoleLogFile = cuttlefish:conf_get("log.console.file", Conf),
 
-    ConsoleHandler = {lager_console_backend, [ConsoleLogLevel]},
+    ConsoleHandler = {lager_console_backend, ConsoleLogLevel},
     ConsoleFileHandler = {lager_file_backend, [{file, ConsoleLogFile},
                                                {level, ConsoleLogLevel},
                                                {size, cuttlefish:conf_get("log.console.size", Conf)},
@@ -551,6 +546,11 @@ end}.
   {datatype, flag}
 ]}.
 
+{mapping, "mqtt.websocket_listen_path", "emqttd.websocket_listen_path", [
+  {default, "/mqtt"},
+  {datatype, string}
+]}.
+
 %%--------------------------------------------------------------------
 %% MQTT Connection
 %%--------------------------------------------------------------------
diff --git a/src/emqttd_ws.erl b/src/emqttd_ws.erl
index e2375e4..b113bcc 100644
--- a/src/emqttd_ws.erl
+++ b/src/emqttd_ws.erl
@@ -33,13 +33,13 @@
 
 
 handle_request(Req) ->
-    handle_request(Req:get(method), Req:get(path), Req).
+    handle_request(Req:get(method), Req:get(path), emqttd:env(websocket_listen_path, "/mqtt"), Req).
 
 %%--------------------------------------------------------------------
 %% MQTT Over WebSocket
 %%--------------------------------------------------------------------
 
-handle_request('GET', "/mqtt", Req) ->
+handle_request('GET', Path, Path, Req) ->
     lager:debug("WebSocket Connection from: ~s", [Req:get(peer)]),
     Upgrade = Req:get_header_value("Upgrade"),
     Proto   = check_protocol_header(Req),
@@ -69,8 +69,8 @@ handle_request('GET', "/mqtt", Req) ->
             Req:respond({400, [], <<"Bad WebSocket Protocol">>})
     end;
 
-handle_request(Method, Path, Req) ->
-    lager:error("Unexpected WS Request: ~s ~s", [Method, Path]),
+handle_request(Method, Path, Required, Req) ->
+    lager:error("Unexpected WS Request: ~s ~s, But Required: ~s", [Method, Path, Required]),
     Req:not_found().
 
 is_websocket(Upgrade) ->
